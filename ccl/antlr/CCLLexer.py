# Generated from /home/krab1k/Research/CCL/CCL.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2+")
        buf.write("\u0124\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3")
        buf.write("\5\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25")
        buf.write("\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\36\3\36\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3!\3\"\3\"")
        buf.write("\3\"\3#\3#\3#\3$\3$\3$\3%\5%\u00e8\n%\3%\3%\3&\3&\3\'")
        buf.write("\3\'\3(\3(\5(\u00f2\n(\3)\3)\6)\u00f6\n)\r)\16)\u00f7")
        buf.write("\3)\3)\3*\3*\7*\u00fe\n*\f*\16*\u0101\13*\3*\3*\3*\3*")
        buf.write("\3+\3+\3+\3+\3,\5,\u010c\n,\3,\6,\u010f\n,\r,\16,\u0110")
        buf.write("\3,\3,\7,\u0115\n,\f,\16,\u0118\13,\5,\u011a\n,\3-\3-")
        buf.write("\7-\u011e\n-\f-\16-\u0121\13-\3.\3.\3\u00ff\2/\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37= ?!A\"C#E$G%I\2K\2M\2O\2Q&S\'")
        buf.write("U(W)Y*[+\3\2\5\3\2\62;\4\2C\\c|\4\2\13\f\"\"\2\u0128\2")
        buf.write("\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3")
        buf.write("\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2")
        buf.write("\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2")
        buf.write("\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%")
        buf.write("\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2Q\3\2\2\2")
        buf.write("\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2")
        buf.write("\2\3]\3\2\2\2\5c\3\2\2\2\7e\3\2\2\2\ti\3\2\2\2\13l\3\2")
        buf.write("\2\2\rn\3\2\2\2\17s\3\2\2\2\21|\3\2\2\2\23\u0081\3\2\2")
        buf.write("\2\25\u0086\3\2\2\2\27\u0090\3\2\2\2\31\u0092\3\2\2\2")
        buf.write("\33\u0094\3\2\2\2\35\u0096\3\2\2\2\37\u0098\3\2\2\2!\u009a")
        buf.write("\3\2\2\2#\u009c\3\2\2\2%\u009e\3\2\2\2\'\u00a2\3\2\2\2")
        buf.write(")\u00a4\3\2\2\2+\u00a6\3\2\2\2-\u00a8\3\2\2\2/\u00ab\3")
        buf.write("\2\2\2\61\u00ae\3\2\2\2\63\u00b5\3\2\2\2\65\u00bf\3\2")
        buf.write("\2\2\67\u00cb\3\2\2\29\u00cf\3\2\2\2;\u00d2\3\2\2\2=\u00d6")
        buf.write("\3\2\2\2?\u00d8\3\2\2\2A\u00da\3\2\2\2C\u00dd\3\2\2\2")
        buf.write("E\u00e0\3\2\2\2G\u00e3\3\2\2\2I\u00e7\3\2\2\2K\u00eb\3")
        buf.write("\2\2\2M\u00ed\3\2\2\2O\u00f1\3\2\2\2Q\u00f3\3\2\2\2S\u00fb")
        buf.write("\3\2\2\2U\u0106\3\2\2\2W\u010b\3\2\2\2Y\u011b\3\2\2\2")
        buf.write("[\u0122\3\2\2\2]^\7y\2\2^_\7j\2\2_`\7g\2\2`a\7t\2\2ab")
        buf.write("\7g\2\2b\4\3\2\2\2cd\7?\2\2d\6\3\2\2\2ef\7h\2\2fg\7q\2")
        buf.write("\2gh\7t\2\2h\b\3\2\2\2ij\7v\2\2jk\7q\2\2k\n\3\2\2\2lm")
        buf.write("\7<\2\2m\f\3\2\2\2no\7f\2\2op\7q\2\2pq\7p\2\2qr\7g\2\2")
        buf.write("r\16\3\2\2\2st\7h\2\2tu\7q\2\2uv\7t\2\2vw\7\"\2\2wx\7")
        buf.write("g\2\2xy\7c\2\2yz\7e\2\2z{\7j\2\2{\20\3\2\2\2|}\7c\2\2")
        buf.write("}~\7v\2\2~\177\7q\2\2\177\u0080\7o\2\2\u0080\22\3\2\2")
        buf.write("\2\u0081\u0082\7d\2\2\u0082\u0083\7q\2\2\u0083\u0084\7")
        buf.write("p\2\2\u0084\u0085\7f\2\2\u0085\24\3\2\2\2\u0086\u0087")
        buf.write("\7u\2\2\u0087\u0088\7w\2\2\u0088\u0089\7e\2\2\u0089\u008a")
        buf.write("\7j\2\2\u008a\u008b\7\"\2\2\u008b\u008c\7v\2\2\u008c\u008d")
        buf.write("\7j\2\2\u008d\u008e\7c\2\2\u008e\u008f\7v\2\2\u008f\26")
        buf.write("\3\2\2\2\u0090\u0091\7`\2\2\u0091\30\3\2\2\2\u0092\u0093")
        buf.write("\7-\2\2\u0093\32\3\2\2\2\u0094\u0095\7/\2\2\u0095\34\3")
        buf.write("\2\2\2\u0096\u0097\7,\2\2\u0097\36\3\2\2\2\u0098\u0099")
        buf.write("\7\61\2\2\u0099 \3\2\2\2\u009a\u009b\7*\2\2\u009b\"\3")
        buf.write("\2\2\2\u009c\u009d\7+\2\2\u009d$\3\2\2\2\u009e\u009f\7")
        buf.write("u\2\2\u009f\u00a0\7w\2\2\u00a0\u00a1\7o\2\2\u00a1&\3\2")
        buf.write("\2\2\u00a2\u00a3\7]\2\2\u00a3(\3\2\2\2\u00a4\u00a5\7_")
        buf.write("\2\2\u00a5*\3\2\2\2\u00a6\u00a7\7.\2\2\u00a7,\3\2\2\2")
        buf.write("\u00a8\u00a9\7k\2\2\u00a9\u00aa\7h\2\2\u00aa.\3\2\2\2")
        buf.write("\u00ab\u00ac\7k\2\2\u00ac\u00ad\7u\2\2\u00ad\60\3\2\2")
        buf.write("\2\u00ae\u00af\7e\2\2\u00af\u00b0\7q\2\2\u00b0\u00b1\7")
        buf.write("o\2\2\u00b1\u00b2\7o\2\2\u00b2\u00b3\7q\2\2\u00b3\u00b4")
        buf.write("\7p\2\2\u00b4\62\3\2\2\2\u00b5\u00b6\7r\2\2\u00b6\u00b7")
        buf.write("\7c\2\2\u00b7\u00b8\7t\2\2\u00b8\u00b9\7c\2\2\u00b9\u00ba")
        buf.write("\7o\2\2\u00ba\u00bb\7g\2\2\u00bb\u00bc\7v\2\2\u00bc\u00bd")
        buf.write("\7g\2\2\u00bd\u00be\7t\2\2\u00be\64\3\2\2\2\u00bf\u00c0")
        buf.write("\7k\2\2\u00c0\u00c1\7u\2\2\u00c1\u00c2\7\"\2\2\u00c2\u00c3")
        buf.write("\7r\2\2\u00c3\u00c4\7t\2\2\u00c4\u00c5\7q\2\2\u00c5\u00c6")
        buf.write("\7r\2\2\u00c6\u00c7\7g\2\2\u00c7\u00c8\7t\2\2\u00c8\u00c9")
        buf.write("\7v\2\2\u00c9\u00ca\7{\2\2\u00ca\66\3\2\2\2\u00cb\u00cc")
        buf.write("\7c\2\2\u00cc\u00cd\7p\2\2\u00cd\u00ce\7f\2\2\u00ce8\3")
        buf.write("\2\2\2\u00cf\u00d0\7q\2\2\u00d0\u00d1\7t\2\2\u00d1:\3")
        buf.write("\2\2\2\u00d2\u00d3\7p\2\2\u00d3\u00d4\7q\2\2\u00d4\u00d5")
        buf.write("\7v\2\2\u00d5<\3\2\2\2\u00d6\u00d7\7>\2\2\u00d7>\3\2\2")
        buf.write("\2\u00d8\u00d9\7@\2\2\u00d9@\3\2\2\2\u00da\u00db\7#\2")
        buf.write("\2\u00db\u00dc\7?\2\2\u00dcB\3\2\2\2\u00dd\u00de\7?\2")
        buf.write("\2\u00de\u00df\7?\2\2\u00dfD\3\2\2\2\u00e0\u00e1\7>\2")
        buf.write("\2\u00e1\u00e2\7?\2\2\u00e2F\3\2\2\2\u00e3\u00e4\7@\2")
        buf.write("\2\u00e4\u00e5\7?\2\2\u00e5H\3\2\2\2\u00e6\u00e8\7\17")
        buf.write("\2\2\u00e7\u00e6\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00e9")
        buf.write("\3\2\2\2\u00e9\u00ea\7\f\2\2\u00eaJ\3\2\2\2\u00eb\u00ec")
        buf.write("\t\2\2\2\u00ecL\3\2\2\2\u00ed\u00ee\t\3\2\2\u00eeN\3\2")
        buf.write("\2\2\u00ef\u00f2\5K&\2\u00f0\u00f2\5M\'\2\u00f1\u00ef")
        buf.write("\3\2\2\2\u00f1\u00f0\3\2\2\2\u00f2P\3\2\2\2\u00f3\u00f5")
        buf.write("\7$\2\2\u00f4\u00f6\5O(\2\u00f5\u00f4\3\2\2\2\u00f6\u00f7")
        buf.write("\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8")
        buf.write("\u00f9\3\2\2\2\u00f9\u00fa\7$\2\2\u00faR\3\2\2\2\u00fb")
        buf.write("\u00ff\7%\2\2\u00fc\u00fe\13\2\2\2\u00fd\u00fc\3\2\2\2")
        buf.write("\u00fe\u0101\3\2\2\2\u00ff\u0100\3\2\2\2\u00ff\u00fd\3")
        buf.write("\2\2\2\u0100\u0102\3\2\2\2\u0101\u00ff\3\2\2\2\u0102\u0103")
        buf.write("\5I%\2\u0103\u0104\3\2\2\2\u0104\u0105\b*\2\2\u0105T\3")
        buf.write("\2\2\2\u0106\u0107\t\4\2\2\u0107\u0108\3\2\2\2\u0108\u0109")
        buf.write("\b+\3\2\u0109V\3\2\2\2\u010a\u010c\7/\2\2\u010b\u010a")
        buf.write("\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010e\3\2\2\2\u010d")
        buf.write("\u010f\5K&\2\u010e\u010d\3\2\2\2\u010f\u0110\3\2\2\2\u0110")
        buf.write("\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u0119\3\2\2\2")
        buf.write("\u0112\u0116\7\60\2\2\u0113\u0115\5K&\2\u0114\u0113\3")
        buf.write("\2\2\2\u0115\u0118\3\2\2\2\u0116\u0114\3\2\2\2\u0116\u0117")
        buf.write("\3\2\2\2\u0117\u011a\3\2\2\2\u0118\u0116\3\2\2\2\u0119")
        buf.write("\u0112\3\2\2\2\u0119\u011a\3\2\2\2\u011aX\3\2\2\2\u011b")
        buf.write("\u011f\5M\'\2\u011c\u011e\5O(\2\u011d\u011c\3\2\2\2\u011e")
        buf.write("\u0121\3\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2")
        buf.write("\u0120Z\3\2\2\2\u0121\u011f\3\2\2\2\u0122\u0123\13\2\2")
        buf.write("\2\u0123\\\3\2\2\2\f\2\u00e7\u00f1\u00f7\u00ff\u010b\u0110")
        buf.write("\u0116\u0119\u011f\4\b\2\2\2\3\2")
        return buf.getvalue()


class CCLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    STRING = 36
    COMMENT = 37
    WS = 38
    NUMBER = 39
    NAME = 40
    ERROR_CHAR = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'where'", "'='", "'for'", "'to'", "':'", "'done'", "'for each'", 
            "'atom'", "'bond'", "'such that'", "'^'", "'+'", "'-'", "'*'", 
            "'/'", "'('", "')'", "'sum'", "'['", "']'", "','", "'if'", "'is'", 
            "'common'", "'parameter'", "'is property'", "'and'", "'or'", 
            "'not'", "'<'", "'>'", "'!='", "'=='", "'<='", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "COMMENT", "WS", "NUMBER", "NAME", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "NL", "DIGIT", "LETTER", "ALPHA", 
                  "STRING", "COMMENT", "WS", "NUMBER", "NAME", "ERROR_CHAR" ]

    grammarFileName = "CCL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


