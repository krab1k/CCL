# Generated from /home/krab1k/Research/CCL/CCL.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2)")
        buf.write("\u010c\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\6")
        buf.write("\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3")
        buf.write("\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3")
        buf.write("\22\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\36\3\36\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3")
        buf.write("\"\3#\3#\3#\3$\5$\u00d8\n$\3$\3$\3%\3%\3&\3&\3\'\3\'\5")
        buf.write("\'\u00e2\n\'\3(\3(\7(\u00e6\n(\f(\16(\u00e9\13(\3(\3(")
        buf.write("\3(\3(\3)\3)\3)\3)\3*\5*\u00f4\n*\3*\6*\u00f7\n*\r*\16")
        buf.write("*\u00f8\3*\3*\7*\u00fd\n*\f*\16*\u0100\13*\5*\u0102\n")
        buf.write("*\3+\3+\7+\u0106\n+\f+\16+\u0109\13+\3,\3,\3\u00e7\2-")
        buf.write("\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31")
        buf.write("\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31")
        buf.write("\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G\2I\2K\2M")
        buf.write("\2O%Q&S\'U(W)\3\2\5\3\2\62;\4\2C\\c|\4\2\13\f\"\"\2\u010f")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2")
        buf.write("\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\3Y\3\2\2\2\5_\3\2\2")
        buf.write("\2\7a\3\2\2\2\te\3\2\2\2\13h\3\2\2\2\rj\3\2\2\2\17o\3")
        buf.write("\2\2\2\21x\3\2\2\2\23}\3\2\2\2\25\u0082\3\2\2\2\27\u008c")
        buf.write("\3\2\2\2\31\u008e\3\2\2\2\33\u0090\3\2\2\2\35\u0092\3")
        buf.write("\2\2\2\37\u0094\3\2\2\2!\u0096\3\2\2\2#\u0098\3\2\2\2")
        buf.write("%\u009a\3\2\2\2\'\u009e\3\2\2\2)\u00a0\3\2\2\2+\u00a2")
        buf.write("\3\2\2\2-\u00a4\3\2\2\2/\u00a7\3\2\2\2\61\u00aa\3\2\2")
        buf.write("\2\63\u00b1\3\2\2\2\65\u00bb\3\2\2\2\67\u00bf\3\2\2\2")
        buf.write("9\u00c2\3\2\2\2;\u00c6\3\2\2\2=\u00c8\3\2\2\2?\u00ca\3")
        buf.write("\2\2\2A\u00cd\3\2\2\2C\u00d0\3\2\2\2E\u00d3\3\2\2\2G\u00d7")
        buf.write("\3\2\2\2I\u00db\3\2\2\2K\u00dd\3\2\2\2M\u00e1\3\2\2\2")
        buf.write("O\u00e3\3\2\2\2Q\u00ee\3\2\2\2S\u00f3\3\2\2\2U\u0103\3")
        buf.write("\2\2\2W\u010a\3\2\2\2YZ\7y\2\2Z[\7j\2\2[\\\7g\2\2\\]\7")
        buf.write("t\2\2]^\7g\2\2^\4\3\2\2\2_`\7?\2\2`\6\3\2\2\2ab\7h\2\2")
        buf.write("bc\7q\2\2cd\7t\2\2d\b\3\2\2\2ef\7v\2\2fg\7q\2\2g\n\3\2")
        buf.write("\2\2hi\7<\2\2i\f\3\2\2\2jk\7f\2\2kl\7q\2\2lm\7p\2\2mn")
        buf.write("\7g\2\2n\16\3\2\2\2op\7h\2\2pq\7q\2\2qr\7t\2\2rs\7\"\2")
        buf.write("\2st\7g\2\2tu\7c\2\2uv\7e\2\2vw\7j\2\2w\20\3\2\2\2xy\7")
        buf.write("c\2\2yz\7v\2\2z{\7q\2\2{|\7o\2\2|\22\3\2\2\2}~\7d\2\2")
        buf.write("~\177\7q\2\2\177\u0080\7p\2\2\u0080\u0081\7f\2\2\u0081")
        buf.write("\24\3\2\2\2\u0082\u0083\7u\2\2\u0083\u0084\7w\2\2\u0084")
        buf.write("\u0085\7e\2\2\u0085\u0086\7j\2\2\u0086\u0087\7\"\2\2\u0087")
        buf.write("\u0088\7v\2\2\u0088\u0089\7j\2\2\u0089\u008a\7c\2\2\u008a")
        buf.write("\u008b\7v\2\2\u008b\26\3\2\2\2\u008c\u008d\7`\2\2\u008d")
        buf.write("\30\3\2\2\2\u008e\u008f\7-\2\2\u008f\32\3\2\2\2\u0090")
        buf.write("\u0091\7/\2\2\u0091\34\3\2\2\2\u0092\u0093\7,\2\2\u0093")
        buf.write("\36\3\2\2\2\u0094\u0095\7\61\2\2\u0095 \3\2\2\2\u0096")
        buf.write("\u0097\7*\2\2\u0097\"\3\2\2\2\u0098\u0099\7+\2\2\u0099")
        buf.write("$\3\2\2\2\u009a\u009b\7u\2\2\u009b\u009c\7w\2\2\u009c")
        buf.write("\u009d\7o\2\2\u009d&\3\2\2\2\u009e\u009f\7]\2\2\u009f")
        buf.write("(\3\2\2\2\u00a0\u00a1\7_\2\2\u00a1*\3\2\2\2\u00a2\u00a3")
        buf.write("\7.\2\2\u00a3,\3\2\2\2\u00a4\u00a5\7k\2\2\u00a5\u00a6")
        buf.write("\7h\2\2\u00a6.\3\2\2\2\u00a7\u00a8\7k\2\2\u00a8\u00a9")
        buf.write("\7u\2\2\u00a9\60\3\2\2\2\u00aa\u00ab\7e\2\2\u00ab\u00ac")
        buf.write("\7q\2\2\u00ac\u00ad\7o\2\2\u00ad\u00ae\7o\2\2\u00ae\u00af")
        buf.write("\7q\2\2\u00af\u00b0\7p\2\2\u00b0\62\3\2\2\2\u00b1\u00b2")
        buf.write("\7r\2\2\u00b2\u00b3\7c\2\2\u00b3\u00b4\7t\2\2\u00b4\u00b5")
        buf.write("\7c\2\2\u00b5\u00b6\7o\2\2\u00b6\u00b7\7g\2\2\u00b7\u00b8")
        buf.write("\7v\2\2\u00b8\u00b9\7g\2\2\u00b9\u00ba\7t\2\2\u00ba\64")
        buf.write("\3\2\2\2\u00bb\u00bc\7c\2\2\u00bc\u00bd\7p\2\2\u00bd\u00be")
        buf.write("\7f\2\2\u00be\66\3\2\2\2\u00bf\u00c0\7q\2\2\u00c0\u00c1")
        buf.write("\7t\2\2\u00c18\3\2\2\2\u00c2\u00c3\7p\2\2\u00c3\u00c4")
        buf.write("\7q\2\2\u00c4\u00c5\7v\2\2\u00c5:\3\2\2\2\u00c6\u00c7")
        buf.write("\7>\2\2\u00c7<\3\2\2\2\u00c8\u00c9\7@\2\2\u00c9>\3\2\2")
        buf.write("\2\u00ca\u00cb\7#\2\2\u00cb\u00cc\7?\2\2\u00cc@\3\2\2")
        buf.write("\2\u00cd\u00ce\7?\2\2\u00ce\u00cf\7?\2\2\u00cfB\3\2\2")
        buf.write("\2\u00d0\u00d1\7>\2\2\u00d1\u00d2\7?\2\2\u00d2D\3\2\2")
        buf.write("\2\u00d3\u00d4\7@\2\2\u00d4\u00d5\7?\2\2\u00d5F\3\2\2")
        buf.write("\2\u00d6\u00d8\7\17\2\2\u00d7\u00d6\3\2\2\2\u00d7\u00d8")
        buf.write("\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00da\7\f\2\2\u00da")
        buf.write("H\3\2\2\2\u00db\u00dc\t\2\2\2\u00dcJ\3\2\2\2\u00dd\u00de")
        buf.write("\t\3\2\2\u00deL\3\2\2\2\u00df\u00e2\5I%\2\u00e0\u00e2")
        buf.write("\5K&\2\u00e1\u00df\3\2\2\2\u00e1\u00e0\3\2\2\2\u00e2N")
        buf.write("\3\2\2\2\u00e3\u00e7\7%\2\2\u00e4\u00e6\13\2\2\2\u00e5")
        buf.write("\u00e4\3\2\2\2\u00e6\u00e9\3\2\2\2\u00e7\u00e8\3\2\2\2")
        buf.write("\u00e7\u00e5\3\2\2\2\u00e8\u00ea\3\2\2\2\u00e9\u00e7\3")
        buf.write("\2\2\2\u00ea\u00eb\5G$\2\u00eb\u00ec\3\2\2\2\u00ec\u00ed")
        buf.write("\b(\2\2\u00edP\3\2\2\2\u00ee\u00ef\t\4\2\2\u00ef\u00f0")
        buf.write("\3\2\2\2\u00f0\u00f1\b)\3\2\u00f1R\3\2\2\2\u00f2\u00f4")
        buf.write("\7/\2\2\u00f3\u00f2\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4")
        buf.write("\u00f6\3\2\2\2\u00f5\u00f7\5I%\2\u00f6\u00f5\3\2\2\2\u00f7")
        buf.write("\u00f8\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2")
        buf.write("\u00f9\u0101\3\2\2\2\u00fa\u00fe\7\60\2\2\u00fb\u00fd")
        buf.write("\5I%\2\u00fc\u00fb\3\2\2\2\u00fd\u0100\3\2\2\2\u00fe\u00fc")
        buf.write("\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0102\3\2\2\2\u0100")
        buf.write("\u00fe\3\2\2\2\u0101\u00fa\3\2\2\2\u0101\u0102\3\2\2\2")
        buf.write("\u0102T\3\2\2\2\u0103\u0107\5K&\2\u0104\u0106\5M\'\2\u0105")
        buf.write("\u0104\3\2\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2\2\2")
        buf.write("\u0107\u0108\3\2\2\2\u0108V\3\2\2\2\u0109\u0107\3\2\2")
        buf.write("\2\u010a\u010b\13\2\2\2\u010bX\3\2\2\2\13\2\u00d7\u00e1")
        buf.write("\u00e7\u00f3\u00f8\u00fe\u0101\u0107\4\b\2\2\2\3\2")
        return buf.getvalue()


class CCLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    COMMENT = 35
    WS = 36
    NUMBER = 37
    NAME = 38
    ERROR_CHAR = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'where'", "'='", "'for'", "'to'", "':'", "'done'", "'for each'", 
            "'atom'", "'bond'", "'such that'", "'^'", "'+'", "'-'", "'*'", 
            "'/'", "'('", "')'", "'sum'", "'['", "']'", "','", "'if'", "'is'", 
            "'common'", "'parameter'", "'and'", "'or'", "'not'", "'<'", 
            "'>'", "'!='", "'=='", "'<='", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "WS", "NUMBER", "NAME", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "NL", "DIGIT", "LETTER", "ALPHA", "COMMENT", 
                  "WS", "NUMBER", "NAME", "ERROR_CHAR" ]

    grammarFileName = "CCL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


