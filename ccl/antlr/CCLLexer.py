# Generated from /home/krab1k/Research/CCL/CCL.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2.")
        buf.write("\u012f\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\2\3\2\3\2\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3")
        buf.write("\6\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3")
        buf.write("\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23")
        buf.write("\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\27")
        buf.write("\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3")
        buf.write(" \3 \3!\3!\3!\3\"\3\"\3\"\3\"\3#\3#\3$\3$\3%\3%\3%\3&")
        buf.write("\3&\3&\3\'\3\'\3\'\3(\3(\3(\3)\5)\u00fa\n)\3)\3)\3*\3")
        buf.write("*\3+\3+\3,\3,\3,\5,\u0105\n,\3-\3-\7-\u0109\n-\f-\16-")
        buf.write("\u010c\13-\3-\3-\3-\3-\3.\3.\3.\3.\3/\5/\u0117\n/\3/\6")
        buf.write("/\u011a\n/\r/\16/\u011b\3/\3/\7/\u0120\n/\f/\16/\u0123")
        buf.write("\13/\5/\u0125\n/\3\60\3\60\7\60\u0129\n\60\f\60\16\60")
        buf.write("\u012c\13\60\3\61\3\61\3\u010a\2\62\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q\2S\2U\2W\2Y*[+]")
        buf.write(",_-a.\3\2\5\3\2\62;\4\2C\\c|\4\2\13\f\"\"\2\u0133\2\3")
        buf.write("\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2")
        buf.write("\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2")
        buf.write("\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2")
        buf.write("\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3")
        buf.write("\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2")
        buf.write("/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Y\3\2\2\2\2[\3\2\2")
        buf.write("\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\3c\3\2\2\2\5h\3\2")
        buf.write("\2\2\7n\3\2\2\2\tp\3\2\2\2\13t\3\2\2\2\rw\3\2\2\2\17y")
        buf.write("\3\2\2\2\21~\3\2\2\2\23\u0087\3\2\2\2\25\u0091\3\2\2\2")
        buf.write("\27\u0096\3\2\2\2\31\u009b\3\2\2\2\33\u009d\3\2\2\2\35")
        buf.write("\u009f\3\2\2\2\37\u00a1\3\2\2\2!\u00a3\3\2\2\2#\u00a5")
        buf.write("\3\2\2\2%\u00a7\3\2\2\2\'\u00a9\3\2\2\2)\u00ab\3\2\2\2")
        buf.write("+\u00ad\3\2\2\2-\u00af\3\2\2\2/\u00b3\3\2\2\2\61\u00b6")
        buf.write("\3\2\2\2\63\u00bd\3\2\2\2\65\u00c3\3\2\2\2\67\u00c6\3")
        buf.write("\2\2\29\u00c9\3\2\2\2;\u00d0\3\2\2\2=\u00da\3\2\2\2?\u00dd")
        buf.write("\3\2\2\2A\u00e1\3\2\2\2C\u00e4\3\2\2\2E\u00e8\3\2\2\2")
        buf.write("G\u00ea\3\2\2\2I\u00ec\3\2\2\2K\u00ef\3\2\2\2M\u00f2\3")
        buf.write("\2\2\2O\u00f5\3\2\2\2Q\u00f9\3\2\2\2S\u00fd\3\2\2\2U\u00ff")
        buf.write("\3\2\2\2W\u0104\3\2\2\2Y\u0106\3\2\2\2[\u0111\3\2\2\2")
        buf.write("]\u0116\3\2\2\2_\u0126\3\2\2\2a\u012d\3\2\2\2cd\7p\2\2")
        buf.write("de\7c\2\2ef\7o\2\2fg\7g\2\2g\4\3\2\2\2hi\7y\2\2ij\7j\2")
        buf.write("\2jk\7g\2\2kl\7t\2\2lm\7g\2\2m\6\3\2\2\2no\7?\2\2o\b\3")
        buf.write("\2\2\2pq\7h\2\2qr\7q\2\2rs\7t\2\2s\n\3\2\2\2tu\7v\2\2")
        buf.write("uv\7q\2\2v\f\3\2\2\2wx\7<\2\2x\16\3\2\2\2yz\7f\2\2z{\7")
        buf.write("q\2\2{|\7p\2\2|}\7g\2\2}\20\3\2\2\2~\177\7h\2\2\177\u0080")
        buf.write("\7q\2\2\u0080\u0081\7t\2\2\u0081\u0082\7\"\2\2\u0082\u0083")
        buf.write("\7g\2\2\u0083\u0084\7c\2\2\u0084\u0085\7e\2\2\u0085\u0086")
        buf.write("\7j\2\2\u0086\22\3\2\2\2\u0087\u0088\7u\2\2\u0088\u0089")
        buf.write("\7w\2\2\u0089\u008a\7e\2\2\u008a\u008b\7j\2\2\u008b\u008c")
        buf.write("\7\"\2\2\u008c\u008d\7v\2\2\u008d\u008e\7j\2\2\u008e\u008f")
        buf.write("\7c\2\2\u008f\u0090\7v\2\2\u0090\24\3\2\2\2\u0091\u0092")
        buf.write("\7c\2\2\u0092\u0093\7v\2\2\u0093\u0094\7q\2\2\u0094\u0095")
        buf.write("\7o\2\2\u0095\26\3\2\2\2\u0096\u0097\7d\2\2\u0097\u0098")
        buf.write("\7q\2\2\u0098\u0099\7p\2\2\u0099\u009a\7f\2\2\u009a\30")
        buf.write("\3\2\2\2\u009b\u009c\7]\2\2\u009c\32\3\2\2\2\u009d\u009e")
        buf.write("\7.\2\2\u009e\34\3\2\2\2\u009f\u00a0\7_\2\2\u00a0\36\3")
        buf.write("\2\2\2\u00a1\u00a2\7`\2\2\u00a2 \3\2\2\2\u00a3\u00a4\7")
        buf.write("-\2\2\u00a4\"\3\2\2\2\u00a5\u00a6\7/\2\2\u00a6$\3\2\2")
        buf.write("\2\u00a7\u00a8\7,\2\2\u00a8&\3\2\2\2\u00a9\u00aa\7\61")
        buf.write("\2\2\u00aa(\3\2\2\2\u00ab\u00ac\7*\2\2\u00ac*\3\2\2\2")
        buf.write("\u00ad\u00ae\7+\2\2\u00ae,\3\2\2\2\u00af\u00b0\7u\2\2")
        buf.write("\u00b0\u00b1\7w\2\2\u00b1\u00b2\7o\2\2\u00b2.\3\2\2\2")
        buf.write("\u00b3\u00b4\7G\2\2\u00b4\u00b5\7G\2\2\u00b5\60\3\2\2")
        buf.write("\2\u00b6\u00b7\7e\2\2\u00b7\u00b8\7w\2\2\u00b8\u00b9\7")
        buf.write("v\2\2\u00b9\u00ba\7q\2\2\u00ba\u00bb\7h\2\2\u00bb\u00bc")
        buf.write("\7h\2\2\u00bc\62\3\2\2\2\u00bd\u00be\7e\2\2\u00be\u00bf")
        buf.write("\7q\2\2\u00bf\u00c0\7x\2\2\u00c0\u00c1\7g\2\2\u00c1\u00c2")
        buf.write("\7t\2\2\u00c2\64\3\2\2\2\u00c3\u00c4\7k\2\2\u00c4\u00c5")
        buf.write("\7h\2\2\u00c5\66\3\2\2\2\u00c6\u00c7\7k\2\2\u00c7\u00c8")
        buf.write("\7u\2\2\u00c88\3\2\2\2\u00c9\u00ca\7e\2\2\u00ca\u00cb")
        buf.write("\7q\2\2\u00cb\u00cc\7o\2\2\u00cc\u00cd\7o\2\2\u00cd\u00ce")
        buf.write("\7q\2\2\u00ce\u00cf\7p\2\2\u00cf:\3\2\2\2\u00d0\u00d1")
        buf.write("\7r\2\2\u00d1\u00d2\7c\2\2\u00d2\u00d3\7t\2\2\u00d3\u00d4")
        buf.write("\7c\2\2\u00d4\u00d5\7o\2\2\u00d5\u00d6\7g\2\2\u00d6\u00d7")
        buf.write("\7v\2\2\u00d7\u00d8\7g\2\2\u00d8\u00d9\7t\2\2\u00d9<\3")
        buf.write("\2\2\2\u00da\u00db\7q\2\2\u00db\u00dc\7h\2\2\u00dc>\3")
        buf.write("\2\2\2\u00dd\u00de\7c\2\2\u00de\u00df\7p\2\2\u00df\u00e0")
        buf.write("\7f\2\2\u00e0@\3\2\2\2\u00e1\u00e2\7q\2\2\u00e2\u00e3")
        buf.write("\7t\2\2\u00e3B\3\2\2\2\u00e4\u00e5\7p\2\2\u00e5\u00e6")
        buf.write("\7q\2\2\u00e6\u00e7\7v\2\2\u00e7D\3\2\2\2\u00e8\u00e9")
        buf.write("\7>\2\2\u00e9F\3\2\2\2\u00ea\u00eb\7@\2\2\u00ebH\3\2\2")
        buf.write("\2\u00ec\u00ed\7#\2\2\u00ed\u00ee\7?\2\2\u00eeJ\3\2\2")
        buf.write("\2\u00ef\u00f0\7?\2\2\u00f0\u00f1\7?\2\2\u00f1L\3\2\2")
        buf.write("\2\u00f2\u00f3\7>\2\2\u00f3\u00f4\7?\2\2\u00f4N\3\2\2")
        buf.write("\2\u00f5\u00f6\7@\2\2\u00f6\u00f7\7?\2\2\u00f7P\3\2\2")
        buf.write("\2\u00f8\u00fa\7\17\2\2\u00f9\u00f8\3\2\2\2\u00f9\u00fa")
        buf.write("\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fc\7\f\2\2\u00fc")
        buf.write("R\3\2\2\2\u00fd\u00fe\t\2\2\2\u00feT\3\2\2\2\u00ff\u0100")
        buf.write("\t\3\2\2\u0100V\3\2\2\2\u0101\u0105\5S*\2\u0102\u0105")
        buf.write("\5U+\2\u0103\u0105\7a\2\2\u0104\u0101\3\2\2\2\u0104\u0102")
        buf.write("\3\2\2\2\u0104\u0103\3\2\2\2\u0105X\3\2\2\2\u0106\u010a")
        buf.write("\7%\2\2\u0107\u0109\13\2\2\2\u0108\u0107\3\2\2\2\u0109")
        buf.write("\u010c\3\2\2\2\u010a\u010b\3\2\2\2\u010a\u0108\3\2\2\2")
        buf.write("\u010b\u010d\3\2\2\2\u010c\u010a\3\2\2\2\u010d\u010e\5")
        buf.write("Q)\2\u010e\u010f\3\2\2\2\u010f\u0110\b-\2\2\u0110Z\3\2")
        buf.write("\2\2\u0111\u0112\t\4\2\2\u0112\u0113\3\2\2\2\u0113\u0114")
        buf.write("\b.\3\2\u0114\\\3\2\2\2\u0115\u0117\7/\2\2\u0116\u0115")
        buf.write("\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0119\3\2\2\2\u0118")
        buf.write("\u011a\5S*\2\u0119\u0118\3\2\2\2\u011a\u011b\3\2\2\2\u011b")
        buf.write("\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u0124\3\2\2\2")
        buf.write("\u011d\u0121\7\60\2\2\u011e\u0120\5S*\2\u011f\u011e\3")
        buf.write("\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2\u0121\u0122")
        buf.write("\3\2\2\2\u0122\u0125\3\2\2\2\u0123\u0121\3\2\2\2\u0124")
        buf.write("\u011d\3\2\2\2\u0124\u0125\3\2\2\2\u0125^\3\2\2\2\u0126")
        buf.write("\u012a\5U+\2\u0127\u0129\5W,\2\u0128\u0127\3\2\2\2\u0129")
        buf.write("\u012c\3\2\2\2\u012a\u0128\3\2\2\2\u012a\u012b\3\2\2\2")
        buf.write("\u012b`\3\2\2\2\u012c\u012a\3\2\2\2\u012d\u012e\13\2\2")
        buf.write("\2\u012eb\3\2\2\2\13\2\u00f9\u0104\u010a\u0116\u011b\u0121")
        buf.write("\u0124\u012a\4\b\2\2\2\3\2")
        return buf.getvalue()


class CCLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    COMMENT = 40
    WS = 41
    NUMBER = 42
    NAME = 43
    ERROR_CHAR = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'name'", "'where'", "'='", "'for'", "'to'", "':'", "'done'", 
            "'for each'", "'such that'", "'atom'", "'bond'", "'['", "','", 
            "']'", "'^'", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'sum'", 
            "'EE'", "'cutoff'", "'cover'", "'if'", "'is'", "'common'", "'parameter'", 
            "'of'", "'and'", "'or'", "'not'", "'<'", "'>'", "'!='", "'=='", 
            "'<='", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "WS", "NUMBER", "NAME", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "NL", "DIGIT", "LETTER", "ALPHA", "COMMENT", 
                  "WS", "NUMBER", "NAME", "ERROR_CHAR" ]

    grammarFileName = "CCL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


